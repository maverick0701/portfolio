{
  "_from": "rotating-file-stream",
  "_id": "rotating-file-stream@2.1.3",
  "_inBundle": false,
  "_integrity": "sha512-zZ4Tkngxispo7DgiTqX0s4ChLtM3qET6iYsDA9tmgDEqJ3BFgRq/ZotsKEDAYQt9pAn9JwwqT27CSwQt3CTxNg==",
  "_location": "/rotating-file-stream",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "rotating-file-stream",
    "fetchSpec": "latest",
    "name": "rotating-file-stream",
    "raw": "rotating-file-stream",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/rotating-file-stream/-/rotating-file-stream-2.1.3.tgz",
  "_shasum": "4b3cc8f56ae70b3e30ccdb4ee6b14d95e66b02bb",
  "_spec": "rotating-file-stream",
  "_where": "/Users/madhav/Desktop/ProjectRes",
  "author": {
    "email": "daniele.icc@gmail.com",
    "name": "Daniele Ricci",
    "url": "https://github.com/iccicci"
  },
  "bugs": {
    "url": "https://github.com/iccicci/rotating-file-stream/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "cicci",
      "url": "https://www.trinityteam.it/DanieleRicci#en"
    },
    {
      "name": "allevo"
    },
    {
      "name": "kbirger"
    },
    {
      "name": "jvassev"
    },
    {
      "name": "wangao"
    },
    {
      "name": "rakshith-ravi"
    },
    {
      "name": "Jorge Silva",
      "email": "jorgemsrs@gmail.com"
    },
    {
      "name": "Jan Christoph Bernack",
      "email": "jc.bernack@gmail.com"
    },
    {
      "name": "cchare",
      "url": "https://github.com/cchare"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Opens a stream.Writable to a file rotated by interval and/or size. A logrotate alternative.",
  "devDependencies": {
    "@types/mocha": "7.0.2",
    "@types/node": "14.0.18",
    "@typescript-eslint/eslint-plugin": "3.6.0",
    "@typescript-eslint/parser": "3.6.0",
    "eslint": "7.4.0",
    "mocha": "8.0.1",
    "nyc": "15.1.0",
    "ts-node": "8.10.2",
    "typescript": "3.9.6"
  },
  "engines": {
    "node": ">=10.0"
  },
  "funding": {
    "url": "https://www.blockchain.com/btc/address/12p1p5q7sK75tPyuesZmssiMYr4TKzpSCN"
  },
  "homepage": "https://github.com/iccicci/rotating-file-stream#readme",
  "keywords": [
    "log",
    "logrotate",
    "rotate"
  ],
  "license": "MIT",
  "name": "rotating-file-stream",
  "optionalDependencies": {},
  "prettier": {
    "arrowParens": "avoid",
    "jsxBracketSameLine": true,
    "overrides": [
      {
        "files": [
          "*.md"
        ],
        "options": {
          "useTabs": false
        }
      }
    ],
    "printWidth": 200,
    "trailingComma": "none",
    "useTabs": true
  },
  "readme": "# rotating-file-stream\n\n[![Build Status][travis-badge]][travis-url]\n[![Code Climate][code-badge]][code-url]\n[![Test Coverage][cover-badge]][code-url]\n[![Donate][donate-badge]][donate-url]\n\n[![NPM version][npm-badge]][npm-url]\n[![Types][types-badge]][npm-url]\n[![NPM downloads][npm-downloads-badge]][npm-url]\n[![Stars][stars-badge]][github-url]\n\n[![Dependencies][dep-badge]][dep-url]\n[![Dev Dependencies][dev-dep-badge]][dev-dep-url]\n[![Dependents][deps-badge]][npm-url]\n\n[code-badge]: https://codeclimate.com/github/iccicci/rotating-file-stream/badges/gpa.svg\n[code-url]: https://codeclimate.com/github/iccicci/rotating-file-stream\n[cover-badge]: https://codeclimate.com/github/iccicci/rotating-file-stream/badges/coverage.svg\n[dep-badge]: https://david-dm.org/iccicci/rotating-file-stream.svg\n[dep-url]: https://david-dm.org/iccicci/rotating-file-stream\n[deps-badge]: https://badgen.net/npm/dependents/rotating-file-stream?icon=npm\n[dev-dep-badge]: https://david-dm.org/iccicci/rotating-file-stream/dev-status.svg\n[dev-dep-url]: https://david-dm.org/iccicci/rotating-file-stream?type=dev\n[donate-badge]: https://badgen.net/badge/donate/bitcoin?icon=bitcoin\n[donate-url]: https://blockchain.info/address/12p1p5q7sK75tPyuesZmssiMYr4TKzpSCN\n[github-url]: https://github.com/iccicci/rotating-file-stream\n[npm-downloads-badge]: https://badgen.net/npm/dw/rotating-file-stream?icon=npm\n[npm-badge]: https://badgen.net/npm/v/rotating-file-stream?color=green&icon=npm\n[npm-url]: https://www.npmjs.com/package/rotating-file-stream\n[stars-badge]: https://badgen.net/github/stars/iccicci/rotating-file-stream?icon=github\n[travis-badge]: https://badgen.net/travis/iccicci/rotating-file-stream?icon=travis\n[travis-url]: https://travis-ci.org/iccicci/rotating-file-stream?branch=master\n[types-badge]: https://badgen.net/npm/types/rotating-file-stream?color=green&icon=typescript\n\n### Description\n\nCreates a [stream.Writable](https://nodejs.org/api/stream.html#stream_class_stream_writable) to a file which is\nrotated. Rotation behaviour can be deeply customized; optionally, classical UNIX **logrotate** behaviour can be used.\n\n### Usage\n\n```javascript\nconst rfs = require(\"rotating-file-stream\");\nconst stream = rfs.createStream(\"file.log\", {\n  size: \"10M\", // rotate every 10 MegaBytes written\n  interval: \"1d\", // rotate daily\n  compress: \"gzip\" // compress rotated files\n});\n```\n\n### Installation\n\nWith [npm](https://www.npmjs.com/package/rotating-file-stream):\n\n```sh\n$ npm install --save rotating-file-stream\n```\n\n### Table of contents\n\n- [Upgrading from v1.x.x to v2.x.x](#upgrading-from-v1xx-to-v2xx)\n- [API](#api)\n  - [rfs.createStream(filename[, options])](#rfscreatestreamfilename-options)\n    - [filename](#filename)\n      - [filename(time[, index])](#filenametime-index)\n      - [filename(index)](#filenameindex)\n  - [Class: RotatingFileStream](#class-rotatingfilestream)\n    - [Event: 'history'](#event-history)\n    - [Event: 'open'](#event-open)\n    - [Event: 'removed'](#event-removed)\n    - [Event: 'rotation'](#event-rotation)\n    - [Event: 'rotated'](#event-rotated)\n    - [Event: 'warning'](#event-warning)\n  - [options](#options)\n    - [compress](#compress)\n    - [encoding](#encoding)\n    - [history](#history)\n    - [immutable](#immutable)\n    - [initialRotation](#initialrotation)\n    - [interval](#interval)\n    - [intervalBoundary](#intervalboundary)\n    - [maxFiles](#maxfiles)\n    - [maxSize](#maxsize)\n    - [mode](#mode)\n    - [path](#path)\n    - [rotate](#rotate)\n    - [size](#size)\n    - [teeToStdout](#teeToStdout)\n- [Rotation logic](#rotation-logic)\n- [Under the hood](#under-the-hood)\n- [Compatibility](#compatibility)\n- [TypeScript](#typescript)\n- [Licence](#licence)\n- [Bugs](#bugs)\n- [ChangeLog](#changelog)\n- [Donating](#donating)\n\n# Upgrading from v1.x.x to v2.x.x\n\nThere are two main changes in package interface.\n\nIn **v1** the _default export_ of the packege was directly the **RotatingFileStream** _constructor_ and the caller\nhave to use it; while in **v2** there is no _default export_ and the caller should use the\n[createStream](#rfscreatestreamfilename-options) exported function and should not directly use\n[RotatingFileStream](#class-rotatingfilestream) class.\nThis is quite easy to discover: if this change is not applied, nothing than a runtime error can happen.\n\nThe other important change is the removal of option **rotationTime** and the introduction of **intervalBoundary**.\nIn **v1** the `time` argument passed to the _filename generator_ function, by default, is the time when _rotaion job_\nstarted, while if [`options.interval`](#interval) option is used, it is the lower boundary of the time interval within\n_rotaion job_ started. Later I was asked to add the possibility to restore the default value for this argument so I\nintroduced `options.rotationTime` option with this purpose. At the end the result was something a bit confusing,\nsomething I never liked.\nIn **v2** the `time` argument passed to the _filename generator_ function is always the time when _rotaion job_\nstarted, unless [`options.intervalBoundary`](#intervalboundary) option is used. In a few words, to maintain back compatibility\nupgrading from **v1** to **v2**, just follow this rules:\n\n- using [`options.rotation`](#rotation): nothing to do\n- not using [`options.rotation`](#rotation):\n  - not using [`options.interval`](#interval): nothing to do\n  - using [`options.interval`](#interval):\n    - using `options.rotationTime`: to remove it\n    - not using `options.rotationTime`: then use [`options.intervalBoundary`](#intervalboundary).\n\n# API\n\n```javascript\nconst rfs = require(\"rotating-file-stream\");\n```\n\n## rfs.createStream(filename[, options])\n\n- `filename` [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\n  [&lt;Function>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) The name\n  of the file or the function to generate it, called _file name generator_. See below for\n  [details](#filename-stringfunction).\n- `options` [&lt;Object>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\n  Rotation options, See below for [details](#options).\n- Returns: [&lt;RotatingFileStream>](#class-rotatingfilestream) The **rotating file stream**!\n\nThis interface is inspired to\n[fs.createWriteStream](https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options) one. The file is rotated\nfollowing _options_ rules.\n\n### filename\n\nThe most complex problem about file name is: \"how to call the rotated file name?\"\n\nThe answer to this question may vary in many forms depending on application requirements and/or specifications.\nIf there are no requirements, a `string` can be used and _default rotated file name generator_ will be used;\notherwise a `Function` which returns the _rotated file name_ can be used.\n\n**Note:**\nif part of returned destination path does not exists, the rotation job will try to create it.\n\n#### filename(time[, index])\n\n- `time` [&lt;Date>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n\n  - By default: the time when rotation job started;\n  - if both [`options.interval`](#interval) and [`intervalBoundary`](#intervalboundary) options are enabled: the start\n    time of rotation period.\n\n  If `null`, the _not-rotated file name_ must be returned.\n\n- `index` [&lt;number>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) The\n  progressive index of rotation by size in the same rotation period.\n\nAn example of a complex _rotated file name generator_ function could be:\n\n```javascript\nconst pad = num => (num > 9 ? \"\" : \"0\") + num;\nconst generator = (time, index) => {\n  if (!time) return \"file.log\";\n\n  var month = time.getFullYear() + \"\" + pad(time.getMonth() + 1);\n  var day = pad(time.getDate());\n  var hour = pad(time.getHours());\n  var minute = pad(time.getMinutes());\n\n  return `${month}/${month}${day}-${hour}${minute}-${index}-file.log`;\n};\n\nconst rfs = require(\"rotating-file-stream\");\nconst stream = rfs(generator, {\n  size: \"10M\",\n  interval: \"30m\"\n});\n```\n\n**Note:**\nif both of [`options.interval`](#interval) [`options.size`](#size) are used, returned _rotated file name_ **must** be\nfunction of both arguments `time` and `index`.\n\n#### filename(index)\n\n- `index` [&lt;number>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) The\n  progressive index of rotation. If `null`, the _not-rotated file name_ must be returned.\n\nIf classical **logrotate** behaviour is enabled (by [`options.rotate`](#rotate)), _rotated file name_ is only a\nfunction of `index`.\n\n## Class: RotatingFileStream\n\nExtends [stream.Writable](https://nodejs.org/api/stream.html#stream_class_stream_writable). It should not be directly\nused. Exported only to be used with `instanceof` operator and similar.\n\n### Event: 'history'\n\nThe `history` event is emitted once the _history check job_ is completed.\n\n### Event: 'open'\n\n- `filename` [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) Is\n  constant unless [`options.immutable`](#immutable) is `true`.\n\nThe `open` event is emitted once the _not-rotated file_ is opened.\n\n### Event: 'removed'\n\n- `filename` [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) The\n  name of the removed file.\n- `number` [&lt;boolean>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n  - `true` if the file was removed due to [`options.maxFiles`](#maxFiles)\n  - `false` if the file was removed due to [`options.maxSize`](#maxSize)\n\nThe `removed` event is emitted once a _rotated file_ is removed due to [`options.maxFiles`](#maxFiles) or\n[`options.maxSize`](#maxSize).\n\n### Event: 'rotation'\n\nThe `rotation` event is emitted once the _rotation job_ is started.\n\n### Event: 'rotated'\n\n- `filename` [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) The\n  _rotated file name_ produced.\n\nThe `rotated` event is emitted once the _rotation job_ is completed.\n\n### Event: 'warning'\n\n- `error` [&lt;Error>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) The\n  non blocking error.\n\nThe `warning` event is emitted once a non blocking error happens.\n\n## options\n\n- [`compress`](#compress):\n  [&lt;boolean>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) |\n  [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\n  [&lt;Function>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)\n  Specifies compression method of rotated files. **Default:** `null`.\n- [`encoding`](#encoding):\n  [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type)\n  Specifies the default encoding. **Default:** `'utf8'`.\n- [`history`](#history):\n  [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type)\n  Specifies the _history filename_. **Default:** `null`.\n- [`immutable`](#immutable):\n  [&lt;boolean>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n  Never mutate file names. **Default:** `null`.\n- [`initialRotation`](#initialRotation):\n  [&lt;boolean>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n  Initial rotation based on _not-rotated file_ timestamp. **Default:** `null`.\n- [`interval`](#interval):\n  [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type)\n  Specifies the time interval to rotate the file. **Default:** `null`.\n- [`intervalBoundary`](#intervalBoundary):\n  [&lt;boolean>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n  Makes rotated file name with lower boundary of rotation period. **Default:** `null`.\n- [`maxFiles`](#maxFiles):\n  [&lt;number>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type)\n  Specifies the maximum number of rotated files to keep. **Default:** `null`.\n- [`maxSize`](#maxSize):\n  [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type)\n  Specifies the maximum size of rotated files to keep. **Default:** `null`.\n- [`mode`](#mode):\n  [&lt;number>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type)\n  Proxied to [fs.createWriteStream](https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options).\n  **Default:** `0o666`.\n- [`path`](#path):\n  [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type)\n  Specifies the base path for files. **Default:** `null`.\n- [`rotate`](#rotate):\n  [&lt;number>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type)\n  Enables the classical UNIX **logrotate** behaviour. **Default:** `null`.\n- [`size`](#size):\n  [&lt;string>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type)\n  Specifies the file size to rotate the file. **Default:** `null`.\n- [`teeToStdout`](#teeToStdout):\n  [&lt;boolean>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n  Writes file content to `stdout` as well. **Default:** `null`.\n\n### encoding\n\nSpecifies the default encoding that is used when no encoding is specified as an argument to\n[stream.write()](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback).\n\n### mode\n\nProxied to [fs.createWriteStream](https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options).\n\n### path\n\nIf present, it is prepended to generated file names as well as for history file.\n\n### teeToStdout\n\nIf `true`, it makes the file content to be written to `stdout` as well. Useful for debugging puposes.\n\n### size\n\nAccepts a positive integer followed by one of these possible letters:\n\n- **B**: Bites\n- **K**: KiloBites\n- **M**: MegaBytes\n- **G**: GigaBytes\n\n```javascript\n  size: '300B', // rotates the file when size exceeds 300 Bytes\n                // useful for tests\n```\n\n```javascript\n  size: '300K', // rotates the file when size exceeds 300 KiloBytes\n```\n\n```javascript\n  size: '100M', // rotates the file when size exceeds 100 MegaBytes\n```\n\n```javascript\n  size: '1G', // rotates the file when size exceeds a GigaByte\n```\n\n### interval\n\nAccepts a positive integer followed by one of these possible letters:\n\n- **s**: seconds. Accepts integer divider of 60.\n- **m**: minutes. Accepts integer divider of 60.\n- **h**: hours. Accepts integer divider of 24.\n- **d**: days. Accepts integer.\n- **M**: months. Accepts integer. **EXPERIMENTAL**\n\n```javascript\n  interval: '5s', // rotates at seconds 0, 5, 10, 15 and so on\n                  // useful for tests\n```\n\n```javascript\n  interval: '5m', // rotates at minutes 0, 5, 10, 15 and so on\n```\n\n```javascript\n  interval: '2h', // rotates at midnight, 02:00, 04:00 and so on\n```\n\n```javascript\n  interval: '1d', // rotates at every midnight\n```\n\n```javascript\n  interval: '1M', // rotates at every midnight between two distinct months\n```\n\n### intervalBoundary\n\nIf set to `true`, the argument `time` of _filename generator_ is no longer the time when _rotation job_ started, but\nthe _lower boundary_ of rotation interval.\n\n**Note:**\nthis option has effect only if [`options.interval`](#interval) is used.\n\n### initialRotation\n\nWhen program stops in a rotation period then restarts in a new rotation period, logs of different rotation period will\ngo in the next rotated file; in a few words: a rotation job is lost. If this option is set to `true` an initial check\nis performed against the _not-rotated file_ timestamp and, if it falls in a previous rotation period, an initial\nrotation job is done as well.\n\n**Note:**\nthis option has effect only if [`options.intervalBoundary`](#intervalboundary) is used.\n\n### compress\n\nFor historical reasons external compression can be used, but the best choice is to use the value `\"gzip\"`.\n\nTo enable external compression, a _function_ can be used or simply the _boolean_ `true` value to use default\nexternal compression.\nThe function should accept `source` and `dest` file names and must return the shell command to be executed to\ncompress the file.\nThe two following code snippets have exactly the same effect:\n\n```javascript\nvar rfs = require(\"rotating-file-stream\");\nvar stream = rfs(\"file.log\", {\n  size: \"10M\",\n  compress: true\n});\n```\n\n```javascript\nvar rfs = require(\"rotating-file-stream\");\nvar stream = rfs(\"file.log\", {\n  size: \"10M\",\n  compress: (source, dest) => \"cat \" + source + \" | gzip -c9 > \" + dest\n});\n```\n\n**Note:**\nthis option is ignored if [`options.immutable`](#immutable) is used.\n\n**Note:**\nthe shell command to compress the rotated file should not remove the source file, it will be removed by the package\nif rotation job complete with success.\n\n### initialRotation\n\nWhen program stops in a rotation period then restarts in a new rotation period, logs of different rotation period will\ngo in the next rotated file; in a few words: a rotation job is lost. If this option is set to `true` an initial check\nis performed against the _not-rotated file_ timestamp and, if it falls in a previous rotation period, an initial\nrotation job is done as well.\n\n**Note:**\nthis option has effect only if both [`options.interval`](#interval) and [`options.intervalBoundary`](#intervalboundary)\nare used.\n\n**Note:**\nthis option is ignored if [`options.rotate`](#rotate) is used.\n\n### rotate\n\nIf specified, classical UNIX **logrotate** behaviour is enabled and the value of this option has same effect in\n_logrotate.conf_ file.\n\n**Note:**\nif this optoin is used following ones take no effect: [`options.history`](#history), [`options.immutable`](#immutable),\n[`options.initialRotation`](#initialrotation), [`options.intervalBoundary`](#intervalboundary),\n[`options.maxFiles`](#maxfiles), [`options.maxSize`](#maxsize).\n\n### immutable\n\nIf set to `true`, names of generated files never changes. New files are immediately generated with their rotated\nname. In other words the _rotated file name generator_ is never called with a `null` _time_ argument unless to\ndeterminate the _history file_ name; this can happen if [`options.history`](#history) is not used while\n[`options.maxFiles`](#maxfiles) or [`options.maxSize`](#maxsize) are used.\nThe `filename` argument passed to [`'open'`](#event-open) _event_ evaluates now as the newly created file name.\n\nUseful to send logs to logstash through filebeat.\n\n**Note:**\nif this option is used, [`options.compress`](#compress) is ignored.\n\n**Note:**\nthis option is ignored if [`options.interval`](#interval) is not used.\n\n### history\n\nDue to the complexity that _rotated file names_ can have because of the _filename generator function_, if number or\nsize of rotated files should not exceed a given limit, the package needs a file where to store this information. This\noption specifies the name _history file_. This option takes effect only if at least one of\n[`options.maxFiles`](#maxfiles) or [`options.maxSize`](#maxsize) is used. If `null`, the _not rotated filename_ with\nthe `'.txt'` suffix is used.\n\n### maxFiles\n\nIf specified, it's value is the maximum number of _rotated files_ to be kept.\n\n### maxSize\n\nIf specified, it's value must respect same syntax of [option.size](#size) and is the maximum size of _rotated files_ to\nbe kept.\n\n# Rotation logic\n\nRegardless of when and why rotation happens, the content of a single\n[stream.write](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback)\nwill never be split among two files.\n\n## by size\n\nOnce the _not-rotated_ file is opened first time, its size is checked and if it is greater or equal to\nsize limit, a first rotation happens. After each\n[stream.write](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback),\nthe same check is performed.\n\n## by interval\n\nThe package sets a [Timeout](https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_args)\nto start a rotation job at the right moment.\n\n# Under the hood\n\nLogs should be handled so carefully, so this package tries to never overwrite files.\n\nAt stream creation, if the _not-rotated_ log file already exists and its size exceeds the rotation size,\nan initial rotation attempt is done.\n\nAt each rotation attempt a check is done to verify that destination rotated file does not exists yet;\nif this is not the case a new destination _rotated file name_ is generated and the same check is\nperformed before going on. This is repeated until a not existing destination file name is found or the\npackage is exhausted. For this reason the _rotated file name generator_ function could be called several\ntimes for each rotation job.\n\nIf requested through [`options.maxFiles`](#maxfiles) or [`options.maxSize`](#maxsize), at the end of a rotation job, a\ncheck is performed to ensure that given limits are respected. This means that\n**while rotation job is running both the limits could be not respected**. The same can happen till the end of first\n_rotation job_ if [`options.maxFiles`](#maxfiles) or [`options.maxSize`](#maxsize) are changed between two runs.\nThe first check performed is the one against [`options.maxFiles`](#maxfiles), in case some files are removed, then the\ncheck against [`options.maxSize`](#maxsize) is performed, finally other files can be removed. When\n[`options.maxFiles`](#maxfiles) or [`options.maxSize`](#maxsize) are enabled for first time, an _history file_ can be\ncreated with one _rotated filename_ (as returned by _filename generator function_) at each line.\n\nOnce an **error** _event_ is emitted, nothing more can be done: the stream is closed as well.\n\n# Compatibility\n\nRequires **Node.js v10.x**.\n\nThe package is tested under [all Node.js versions](https://travis-ci.org/iccicci/rotating-file-stream)\ncurrently supported accordingly to [Node.js Release](https://github.com/nodejs/Release#readme).\n\nTo work with the package under Windows, be sure to configure `bash.exe` as your _script-shell_.\n\n```\n> npm config set script-shell bash.exe\n```\n\n# TypeScript\n\nExported in **TypeScript**.\n\n```typescript\nimport { Writable } from \"stream\";\nexport declare type Compressor = (source: string, dest: string) => string;\nexport declare type Generator = (time: number | Date, index?: number) => string;\nexport interface Options {\n  compress?: boolean | string | Compressor;\n  encoding?: BufferEncoding;\n  history?: string;\n  immutable?: boolean;\n  initialRotation?: boolean;\n  interval?: string;\n  intervalBoundary?: boolean;\n  maxFiles?: number;\n  maxSize?: string;\n  mode?: number;\n  path?: string;\n  rotate?: number;\n  size?: string;\n  teeToStdout?: boolean;\n}\nexport declare class RotatingFileStream extends Writable {}\nexport declare function createStream(filename: string | Generator, options?: Options): RotatingFileStream;\n```\n\n# Licence\n\n[MIT Licence](https://github.com/iccicci/rotating-file-stream/blob/master/LICENSE)\n\n# Bugs\n\nDo not hesitate to report any bug or inconsistency [@github](https://github.com/iccicci/rotating-file-stream/issues).\n\n# ChangeLog\n\n[ChangeLog](https://github.com/iccicci/rotating-file-stream/blob/master/CHANGELOG.md)\n\n# Donating\n\nIf you find useful this package, please consider the opportunity to donate some satoshis to this bitcoin address:\n**12p1p5q7sK75tPyuesZmssiMYr4TKzpSCN**\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/iccicci/rotating-file-stream.git"
  },
  "scripts": {
    "all": "npm run eslint && npm run coverage",
    "clean": "node -r ts-node/register utils.ts clean",
    "coverage": "npm run clean && TZ=\"Europe/Rome\" nyc -r lcov -r text -r text-summary -r html mocha -r ts-node/register test/*ts",
    "eslint": "eslint index.ts utils.ts test/*ts",
    "ignore": "node -r ts-node/register utils.ts ignore",
    "prepare": "npm run ignore && tsc",
    "test": "npm run clean && mocha -r ts-node/register test/*ts"
  },
  "types": "index.d.ts",
  "version": "2.1.3"
}
